{"version":3,"sources":["../server/index.js"],"names":["require","Stamp","Appliance","rPi","mongoose","Promise","global","connect","PORT","port","app","server","createServer","clients","pingTimeout","use","static","__dirname","get","req","res","sendFile","join","dbrpi","emit","on","console","log","data","t","timeSt","time","type","save","then","err","getDur","aid","resolve","reject","find","docs","dat","give","i","length","start","stop","push","duration","sockets","socket","id","room","d","tab","rpi","msg","message","mg","listen","process","env","address"],"mappings":"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","file":"index.js","sourcesContent":["// all module imports here\nimport express from 'express' // for rendering documents and handling requests\nimport http from 'http' // http connects both express and socket.io\nimport path from 'path'\nimport { listen } from 'socket.io' // for real time data streaming\nimport io from 'socket.io-client';\nimport moment from 'moment';\nconst {Stamp, Appliance, rPi} = require('./models/models');\nconst mongoose = require('mongoose');\nmongoose.Promise = global.Promise;\nmongoose.connect('mongodb://localhost:27017/eis');\n// import PythonShell from 'python-shell' // for doing nlp\n// import nlp from 'compromise' // for nlp\n\n// console.log(nlp(`Turn on the lights.`).normalize().out('text'))\n\n// all relative imports here\nimport config from '../config.json' // this file contains all the configs.\n\n// global variables\nconst PORT = config.port\nconst app = express()\napp.server = http.createServer(app)\nconst clients = listen(app.server, { pingTimeout: 30000 }) // { pingTimeout: 30000 } => makes compatible with react-native\n\napp.use(express.static(__dirname))\n// all http routes here\napp.get('/*', (req, res) => res.sendFile(path.join(__dirname, './index.html'))) // TODO: render the actual frontend\n\n// database from rpi\nconst dbrpi = io.connect('http://192.168.43.178:8080')\ndbrpi.emit('database', 'database')\ndbrpi.on('dbtime', data => {\n    console.log(data)\n    var t = Stamp({\n        timeSt: data.time,\n        type: data.type\n    });\n    t.save().then(\n        (res) => {\n            console.log(res);\n        },\n        (err) => console.log(err)\n    );\n})\n\nconst getDur = (aid) => new Promise((resolve, reject) => {\n    Stamp.find({}).then(\n        (docs) => {\n            const dat = docs\n            // console.log(dat)\n            const give = []\n            for(let i = 0; i < 2 || i < dat.length - 2; i += 2) {\n                let start = dat[i].timeSt\n                let stop = dat[i + 1].timeSt               \n                give.push({ start, stop, duration: moment(stop)-moment(start) })\n            }\n            resolve(give)\n            // socket.to('iwant').emit('durdat', { aid: 0, tab: give })\n        },\n        (err) => reject('oh no!!')\n    );\n})\n\n// const giveData = io.connect('http://localhost:4500')\n\n// all socket routes goes here\nclients.sockets.on('connection', socket => {\n    console.log('A client just joined on', socket.id)\n    socket.on('iwant', room => {\n        socket.join(room);\n        console.log('iwant');\n    })\n\n    socket.on('durreq', d => {\n        console.log(d.aid)\n        getDur(0).then(give => {\n            console.log(give)\n            socket.emit('durdat', { aid: 0, tab: give });\n            console.log('what');\n        })\n    })\n    \n    socket.on('message', data => {\n        const rpi = io.connect('http://192.168.43.178:8080') // RPi's ad \n        console.log('client -->', data.msg)\n        rpi.emit('light', { message : data.msg })\n        rpi.on('reply', data => {\n            socket.emit('reply', { message: data.mg })\n\n            console.log('PI --->', data.mg)        \n        })\n    })\n})\n\n// tell our app to listen to our port\napp.server.listen(process.env.PORT || PORT, _ => console.log(`Magic happens on ${app.server.address().port}`))"]}