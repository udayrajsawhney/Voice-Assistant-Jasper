{"version":3,"sources":["../server/index.js"],"names":["PORT","port","app","server","createServer","clients","pingTimeout","use","static","__dirname","get","req","res","sendFile","join","sockets","on","console","log","socket","id","rpi","connect","data","msg","emit","message","mg","listen","process","env","address"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AAOA;;;;;;AAAoC;;AAEpC;AAVmC;AAFX;AAFxB;AAeA,IAAMA,OAAO,iBAAOC,IAApB;AATA;AACA;;AAEA;;AAEA;AAV8B;;AAe9B,IAAMC,MAAM,wBAAZ;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;AACA,IAAMG,UAAU,oBAAOH,IAAIC,MAAX,EAAmB,EAAEG,aAAa,KAAf,EAAnB,CAAhB,C,CAA2D;;AAE3DJ,IAAIK,GAAJ,CAAQ,kBAAQC,MAAR,CAAeC,SAAf,CAAR;AACA;AACAP,IAAIQ,GAAJ,CAAQ,IAAR,EAAc,UAACC,GAAD,EAAMC,GAAN;AAAA,WAAcA,IAAIC,QAAJ,CAAa,eAAKC,IAAL,CAAUL,SAAV,EAAqB,cAArB,CAAb,CAAd;AAAA,CAAd,E,CAAgF;;AAEhF;AACAJ,QAAQU,OAAR,CAAgBC,EAAhB,CAAmB,YAAnB,EAAiC,kBAAU;AACvCC,YAAQC,GAAR,CAAY,yBAAZ,EAAuCC,OAAOC,EAA9C;AACAD,WAAOH,EAAP,CAAU,SAAV,EAAqB,gBAAQ;AACzB,YAAMK,MAAM,iBAAGC,OAAH,CAAW,4BAAX,CAAZ,CADyB,CAC4B;AACxD;AACG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAL,gBAAQC,GAAR,CAAY,YAAZ,EAA0BK,KAAKC,GAA/B;AACAH,YAAII,IAAJ,CAAS,OAAT,EAAkB,EAAEC,SAAUH,KAAKC,GAAjB,EAAlB;AACAH,YAAIL,EAAJ,CAAO,OAAP,EAAgB,gBAAQ;AACpBG,mBAAOM,IAAP,CAAY,OAAZ,EAAqB,EAAEC,SAASH,KAAKI,EAAhB,EAArB;AACAV,oBAAQC,GAAR,CAAY,SAAZ,EAAuBK,KAAKI,EAA5B;AACH,SAHD;AAIH,KAzBD;AA0BH,CA5BD;;AA8BA;AACAzB,IAAIC,MAAJ,CAAWyB,MAAX,CAAkBC,QAAQC,GAAR,CAAY9B,IAAZ,IAAoBA,IAAtC,EAA4C;AAAA,WAAKiB,QAAQC,GAAR,uBAAgChB,IAAIC,MAAJ,CAAW4B,OAAX,GAAqB9B,IAArD,CAAL;AAAA,CAA5C","file":"index.js","sourcesContent":["// all module imports here\nimport express from 'express' // for rendering documents and handling requests\nimport http from 'http' // http connects both express and socket.io\nimport path from 'path'\nimport { listen } from 'socket.io' // for real time data streaming\nimport io from 'socket.io-client'\n// import PythonShell from 'python-shell' // for doing nlp\n// import nlp from 'compromise' // for nlp\n\n// console.log(nlp(`Turn on the lights.`).normalize().out('text'))\n\n// all relative imports here\nimport config from '../config.json' // this file contains all the configs.\n\n// global variables\nconst PORT = config.port\nconst app = express()\napp.server = http.createServer(app)\nconst clients = listen(app.server, { pingTimeout: 30000 }) // { pingTimeout: 30000 } => makes compatible with react-native\n\napp.use(express.static(__dirname))\n// all http routes here\napp.get('/*', (req, res) => res.sendFile(path.join(__dirname, './index.html'))) // TODO: render the actual frontend\n\n// all socket routes goes here\nclients.sockets.on('connection', socket => {\n    console.log('A fucker just joined on', socket.id)\n    socket.on('message', data => {\n        const rpi = io.connect('http://192.168.43.179:8080') // RPi's address            \n    \t// process the message here... using nlp techniques, then emit the reply to client and also to raspberry pi server\n        // const options = {\n        //     mode: 'text',\n        //     scriptPath: __dirname + '/../',\n        //     args: [ data.msg ]\n        // }\n        // PythonShell.run('nlp.py', options, (err, results) => {\n        //     if (err) throw err;\n        //     // results is an array consisting of messages collected during execution\n        //     console.log(results[0]);\n        // })\n        // let message = data.msg\n        // let normailzed_message = nlp(data.msg).normalize().out('text')\n        // let verbs = nlp(normailzed_message).verbs().out('array')\n        // let nouns = nlp(normailzed_message).nouns().out('array')\n        // let isQuestion = nlp(normailzed_message).questions().out('array').length > 0      \n        // console.log(`🐱‍👤Verbs:\\n${verbs}\\n✨Nouns:\\n${nouns}\\n🙋‍Question:\\n${isQuestion}`)    \n        console.log('client -->', data.msg)\n        rpi.emit('light', { message : data.msg })\n        rpi.on('reply', data => {\n            socket.emit('reply', { message: data.mg })\n            console.log('PI --->', data.mg)        \n        })\n    })\n})\n\n// tell our app to listen to our port\napp.server.listen(process.env.PORT || PORT, _ => console.log(`Magic happens on ${app.server.address().port}`))"]}